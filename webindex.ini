## This is an example of a valid WebIndex configuration file
##
## You can use this example to create your own

#### Webindex configuration file
##
## Please read the information provided with the various tags in this configuration file.
##
## A note on variables: It is possible to create variables, for example a 'server' variable
## in the following manner.
##
## server	= www.mydomain.com
##
## This definition creates a variable that can be used throughout this configuration file.
## Variables defined within tags have a limited scope. You can reference this variable by enclosing
## its name with braces, as in {server}.
##
##

<cache>
	########
	#### Control how the cache operates
	##
	## Required attributes:	(None)
	## Available variables:	expires, file
	##
	####
	##
	## - expires
	##   > Specify how long an entry in the cache remains valid. Valid units are: "year(s)", 
	##     "month(s)", "week(s)", "day(s)", "hour(s)", "minute(s)" and "second(s)". You may 
	##     combine these units (e.g.: "1 day and 12 hours"). Defaults to "6 hours".
	##
	## - file
	##   > Specify where the cache is located. Defaults to "cache.web".
	##
	########

	expires		= 6 hours
	file		= /tmp/cache.web
</cache>

<database database1>

	########
	#### Specify a database connection
	##
	## Required attributes:	an identifier (in this case 'database1')
	## Available variables:	dbclient, dbname, user, password, host, dsn, connectstring
	##
	####
	##
	## - dbclient
	##   > Required
	##   > Specify which database plugin to use. Allowed values: "ODBC". No default value.
	##
	## - dbname
	##   > Specify the name of the database to use. No default value.
	##
	## - user
	##   > Specify which username to use to connect to the database. No default value.
	##
	## - password
	##   > Specify which password to use to connect to the database. No default value.
	##
	## - host
	##   > Specify to which host to connect, in order to make this database connection (untested)
	##
	## - dsn
	##   > Specify which DSN (data service name) to use
	##
	## - connectstring
	##   > Or, provide a connectstring to feed to the database plugin you have specified.
	##     Doing so will override all other variables except "dbclient".
	##
	########


	dbclient	= odbc
	dbname		= website
	user		= edward
	password	=
	host		= localhost
	dsn		= Mysql
	connectstring	=
</database>

<directory>

	########
	#### Include a directory with ordinary 'static' web pages in the index.
	#### Each file in that directory will be included in the index.
	##
	## Required attributes:	(None)
	## Available variables:	local, public
	##
	####
	##
	## - local
	##   > Required
	##   > Specify which directory contains the ordinary 'static' web pages
	##
	## - public
	##   > Required
	##   > Specify how this directory and its content can be accessed online.
	##
	########

	local = /var/www/14hoog/
	public = http://beestje.14hoognet.vpn/
</directory>

<dynamic>
	########
	#### Use this tag to specify a dynamic webpage
	##
	## Required attributes:	(None)
	## Available variables:	url, post
	## Available tags:	argument
	##
	####
	##
	## - url
	##   > Required
	##   > Provide a template to specify how this URL generally looks. See example below.
	##
	## - post
	##   > Provide a template of the 'post' variables this web pages requires. Usage similar
	##     to the 'url' variable.
	##
	########


	#### The <argument> - tag
	#### Required for each argument used in the 'url' and 'post' variables
	##
	## Required attributes:	an identifier (usually name of the argument)
	## Available variables: name, source, condition, query
	##
	####
	##
	## - name
	##   > Required
	##   >
	##
	## - source
	##   > Required
	##   >
	##
	## - condition
	##   >
	##
	## - query
	##   >
	##
	########

	####
	##
	## Example configuration (16 lines)
	##
	##  1. <dynamic>
	##  2.   server = www.mydomain.com
	##  3.   url = http://{server}/article.php?{arg1.name}={arg1.value}&{arg2.name}={arg2.value}
	##  4.
	##  5.   <argument arg1>
	##  6.       name         = article
	##  7.       source       = database1.articles.id
	##  8.   </argument>
	##  9.
	## 10.   <argument arg2>
	## 11.        name        = page
	## 12.        source      = database1.articles.page
	## 13.        condition   = {arg1.column}={arg1.value}
	## (13a.      query       = SELECT page FROM articles WHERE {arg1.table}.{arg1.column}={arg1.value}  )
	## 14.   </argument>
	## 15.
	## 16. </dynamic>
	##
	## This configuration will generate URLs such as:
	##
	## 	http://www.mydomain.com/article.php?article=1&page=1
	## 	http://www.mydomain.com/article.php?article=1&page=2
	## 	http://www.mydomain.com/article.php?article=1&page=3
	## 	http://www.mydomain.com/article.php?article=2&page=1
	## 	http://www.mydomain.com/article.php?article=2&page=2
	## 	http://www.mydomain.com/article.php?article=3&page=1
	## 	http://www.mydomain.com/article.php?article=3&page=2
	## 	http://www.mydomain.com/article.php?article=3&page=3
	## 	http://www.mydomain.com/article.php?article=3&page=4
	## 	... etcetera
	##
	## Explanation:
	##
	##  1. Opening tag
	##  2. You can create your own variables such as the convenient 'server' variable in the example.
	##  3. Specify how an URL for this page generally looks. This page references the 'server' variable
	##     defined in line 1 and introduces two arguments: arg1 and arg2.
	##     Note how the name and value of these arguments are referenced. You can access an argument's
	##     associated database, table and column in a similar way, by use of the keywords "database",
	##     "table" and "column".
	##  4.
	##  5. Opening tag for the definition of argument 'arg1'. The identifier ('arg1' in this case) is required.
	##  6. The 'name' variable defines the argument's name that will end up in the final URL
	##  7. The 'source' variable defines the database source for this argument. This database source contains
	##     values which, if assigned to this argument, help create a valid URL.
	##     The form of this 'source' variable is <database identifier>.<table>.<column>, which in this case
	##     translates to database1.articles.id
	##  8. Closing tag for this argument
	##  9.
	## 10. Opening tag for 'arg2'
	## 11. The 'name' variable
	## 12. The 'source' variable
	## 13. The 'condition' variable helps control which values are assigned to this argument. It is not uncommon
	##     that the value of some other argument is a deciding factor in determining which values are valid for
	##     this argument.
	##     In the example above, the 'page' variable is dependent on 'argument': the value for 'article' determines
	##     which values are valid for 'page' (look to see what I mean).
	##     In the process of generating the URLs, the value for 'article' is determined first. This limits the
	##     number of possible values for 'page'. The only valid values are those where the value in the source
	##     column for 'article' is equal to the value that was assigned to 'article', which can be expressed as
	##     "id={arg1.value}". Or, in more general terms, as "{arg1.column}={arg1.value}".
	##
	##     For those interested: Internally, this condition will be translated to the SQL-query
	##
	##           SELECT DISTINCT page FROM articles WHERE id={arg1.value}
	##
	##     The values resulting from this query are sequentially assigned to the 'page' variable. Each assignment
	##     causes a new URL to be generated. If the query runs out of results, then the next value for 'arg1' is
	##     fetched and the process starts over again. Eventually this causes all valid URLs to be generated.
	##
	##     You can also manually provide an SQL string to feed this process, as is demonstrated in line 13a. Make
	##     sure your query returns only _one_ column. Also beware that the 'query' and 'condition' variables are
	##     mutually exclusive (you can't use both).
	##
	##     This file is processed by a one-pass interpreter, so parameters that are referenced in other arguments'
	##     "conditions" should be declared first.
	##
	## 14. Closing tag for this argument
	## 15.
	## 16. Closing tag for this dynamic web page
	##
	##
	## In case your web pages cannot be described with this mechanism, then you can resort to the 'script' and
	## 'textfile' tags described below.
	########


	url=http://beestje.14hoognet.vpn/~edward/moi.php?{pagina.name}={pagina.value}
	<argument pagina>
		name	= pagina
		source	= database1.nieuws.pagina
	</argument>
</dynamic>

#<script>

	########
	#### Provide a script that returns a list of URLs
	##
	## Required attributes:	(None)
	## Available variables:	script
	##
	####
	##
	## - script
	##   > Required
	##   > Specify the path and filename of the script to execute
	##
	########

	####
	##
	## The script needs to provide a list of URLs in the following format:
	##
	## <item>
	##   url  = http://www.mydomain.com/article.php?article=1&page=1
	##   post = wantscookie=1
	## </item>
	##
	## The 'post' variable is optional.
	##
	####

# 	script	= "C:\Program Files\Python\2.2.3\python.exe" script.py
# 	script	= "/home/webmaster/urlscript.py"
#</script>

#<textfile>

	########
	#### Provide a textfile that contains a list of URLs
	##
	## Required attributes:	(None)
	## Available variables:	file
	##
	####
	##
	## - file
	##   > Required
	##   > Specify the path and filename of the textfile
	##
	########

#	file	= c:\textfile.example.txt
#	file	= /var/www/urls.txt
#</textfile>


########
#### Configuration for output-plugins
########

<oai>
	adminEmail	= webmaster@beestje.14hoognet.vpn
	repositoryname	= A WebIndex URL repository
</oai>

<html>
	template	= D:\Prog\Python\Release\engine\output\html_templates\default.tpl
	chunksize	= 100
</html>
